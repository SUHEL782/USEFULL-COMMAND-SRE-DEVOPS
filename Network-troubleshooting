5. How do you find which process is using a specific port?
 Linux Basics 

üîπ Services & Processes
Q1. How do you check if a service is running?
systemctl status sshd

Q2. What‚Äôs the difference between service and systemctl?
service ‚Üí older SysV init command.

systemctl ‚Üí systemd command, modern systems.

Example:
service ssh status
systemctl status ssh

Q3. How do you enable a service to start at boot?
sudo systemctl enable nginx

Q4. How do you stop and restart a service?
sudo systemctl stop nginx
sudo systemctl restart nginx

Q5. How do you find which process is using a specific port?
sudo lsof -i :80
sudo netstat -tulpn | grep 80

Q6. Difference between kill, pkill,ill by proc and killall?
pkill <name> ‚Üí kill by process name.
kill <PID> ‚Üí kess ID.


killall <name> ‚Üí kill all processes with that name.

Q7. How do you monitor all running processes?
ps aux
top
htop   # if installed

üîπ Logs & Monitoring
Q8. Where are Linux system logs stored by default?
/var/log/ directory.

Examples:

/var/log/syslog or /var/log/messages ‚Üí system logs.

/var/log/auth.log ‚Üí authentication logs.

/var/log/dmesg ‚Üí kernel logs.

Q9. What‚Äôs the difference between /var/log/messages and /var/log/syslog?
/var/log/syslog ‚Üí Debian/Ubuntu general system logs.

/var/log/messages ‚Üí RedHat/CentOS equivalent.

Q10. How do you view authentication logs?
cat /var/log/auth.log     # Debian/Ubuntu
cat /var/log/secure       # RedHat/CentOS

Q11. How do you view logs in real-time?
tail -f /var/log/syslog
journalctl -f

Q12. How do you check only the last 50 lines of a log file?
tail -n 50 /var/log/syslog

Q13. What is the difference between journalctl and text log files in /var/log/?
journalctl ‚Üí systemd journal (binary format, persistent).

/var/log/ ‚Üí plain text log files.

Q14. How do you check kernel logs?
dmesg | less
journalctl -k

Q15. How do you safely clear or rotate logs?
To clear manually:
sudo truncate -s 0 /var/log/syslog

To rotate:
sudo logrotate /etc/logrotate.conf

üîπ Scenario-Based
Q16. A user reports they cannot log in. How do you troubleshoot?
Check account status:
 passwd -S username

Verify shell in /etc/passwd.

Check logs:
 tail -f /var/log/auth.log

Ensure disk is not full:
 df -h

Q17. A service is running but not responding on its port. Steps?
Check service status:
 systemctl status nginx

Verify port:
 ss -tulpn | grep 80

Check firewall:
 sudo iptables -L -n
sudo ufw status

Review logs:
 journalctl -u nginx

Q18. ‚ÄúPermission denied‚Äù when accessing a directory. How to debug?
Check permissions:
 ls -ld directory

Check ownership:
 ls -l

Check ACLs:
 getfacl directory

Q19. CPU usage is 100%. How do you find culprit?
top
ps -eo pid,ppid,cmd,%mem,%cpu --sort=-%cpu | head

Q20. Disk usage is full. How to fix?
df -h          # Check usage
du -sh *       # Find big dirs

Clear logs: /var/log/

Remove old files/backups.



# jenkins config port number 
1. /etc/default/jenkins
2. /lib/systemd/system/jenkins.service
# secribe the details service
kubectl describe svc nginx-service
#command get the ip
kubectl get svc
# used the changes kubernets deployment images 
kubectl set image deployment/nginx-deployment nginx=nginx:1.24.0
# decribe the pods
kubectl describe deployment nginx-deploymnet 



ping = test connectivity (ICMP echo)
ping www.google.com ‚Üí check if internet reachable

traceroute = trace network path + spot where packets drop or delay
traceroute 8.8.8.8

nslookup = quick DNS resolve check
nslookup example.com

dig = detailed DNS query, good for debugging DNS issues
dig example.com ANY

ip a = show all interfaces and IPs, confirm interface status
ip link set eth0 up/down = enable or disable interface

ip r = show routing table, confirm routes exist or find missing routes

ss -tuln / netstat -tuln = check open and listening ports, troubleshoot port conflicts
ss -plnt = show which process is using a port

curl -I https://yourapp.com = check HTTP headers, server response, SSL problems

telnet yourhost 80 = test if port is open and accepting connections

mtr = combines ping + traceroute, live network path and latency
mtr yourhost

ethtool eth0 = check NIC stats: link status, speed, errors, reset if needed

iptables -L -v -n = check firewall rules and packet counts, troubleshoot blocked traffic

tcpdump -i eth0 port 80 = capture packets on port 80, analyze network traffic

iftop -i eth0 = live bandwidth usage by connection, find bandwidth hogs

nmap -sT -p 1-65535 yourhost = full port scan, troubleshoot open ports and firewall

arp -a = show local MAC address cache, troubleshoot LAN issues

route -n = older style routing table display

watch -n 2 ip a = refresh interface status every 2 seconds, watch changes live

systemctl restart network or ifdown eth0 && ifup eth0 = restart network service or interface if stuck

More useful network commands
nmcli dev status = show NetworkManager managed devices and status
nmcli connection show = list saved network connections
nmcli connection up <name> = bring up a connection
nmcli connection down <name> = bring down a connection

ping -c 5 8.8.8.8 = ping with count, only 5 pings

ip neigh show = show neighbor table (ARP cache)

ss -s = summary of socket statistics

curl -v http://yourapp.com = verbose curl output for debugging

iptables-save > /etc/iptables/rules.v4 = save current firewall rules (Debian/Ubuntu)

iptables-restore < /etc/iptables/rules.v4 = restore firewall rules

Advanced / automation / best practice
Use Ansible or Terraform to push and manage network configs and firewall rules across many servers, avoid manual mistakes

Automate network health checks running scripts with ping, curl, ss, log results, alert on failure

Use Prometheus + Alertmanager to monitor network metrics: packet loss, interface status, latency, open ports

For deep packet analysis, capture traffic with tcpdump, then analyze in Wireshark

Export network metrics using node_exporter or custom exporters for dashboards and alerts

Harden security: configure firewalls properly, enable fail2ban, limit exposed ports to minimum

Document network setup, keep configs and scripts in git repo for version control and audit

Use iptables-save / iptables-restore or firewalld zones for consistent firewall management

Regularly review logs: /var/log/syslog, /var/log/messages, and journalctl for network-related errors

Set up logrotate for network logs to prevent disk full issues

Monitor network interfaces with ifplugd or similar tools to auto-restart interfaces on link down

